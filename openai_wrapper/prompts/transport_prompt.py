COMMAND_PROMPT = """
<COMMANDの説明>
コマンドはJSON形式です。
JSONの形式は下記です。
{
  "commands": [{ "action": <command> }, ...],
  "area_state": <ここに移動可能範囲や画面から読み取った状態を出力。主人公や物の位置をできる限り詳細に記載する。また主人公が行動できる範囲（黒い壁などは移動できない）についても詳細に記載してください。>,
  "action_reason": <ここにそのコマンドを実行する理由を出力>
}
image_state, action_reason はすべて日本語で表示してください。

上記JSONのcommandsは、下記形式になります。
[{ "action": <command> }, ...]

コマンドは6種類。
# Aを送るコマンド
{ "action": "a" }
このコマンドではゲームボーイのAコマンドを送ります。
# Bを送るコマンド
{ "action": "b" }
このコマンドではゲームボーイのBコマンドを送ります。
# 右矢印を送るコマンド
{ "action": "move_right" }
このコマンドではゲームボーイの右矢印を押すコマンドを送ります。
# 下矢印を送るコマンド
{ "action": "move_down" }
このコマンドではゲームボーイの下矢印を押すコマンドを送ります。
# 左矢印を送るコマンド
{ "action": "move_left" }
このコマンドではゲームボーイの左矢印を押すコマンドを送ります。
# 上矢印を送るコマンド
{ "action": "move_up" }
このコマンドではゲームボーイの上矢印を押すコマンドを送ります。

# 1つコマンドを送る例1
{ "action": "a" }

# 1つコマンドを送る例2
{ "action": "b" }

# 複数コマンドを送る例1
[{ "action": "move_down" }, { "action": "move_right" }]

# 複数コマンドを送る例2
[{ "action": "move_left" }, { "action": "a" }]
</COMMANDの説明>
"""

GAME_AREA_EXPLAIN_PROMPT = """
<現在表示している画面の情報>
画面の情報は、2種類あり、9x10のグリッドで表現されます。
この情報の1x1の情報をセルと呼びます。

主人公は常に(y:4,x:4)の位置にいます。y,xのインデックスは0から始まります。
主人公が動いてもその位置は変わらず周りの情報が移動します。

画面情報の1つ目は物体情報、2つ目は衝突情報です。
物体情報は、その位置にどの物体が存在しているかを整数で表し、
衝突情報は移動可能かどうかを0,1で表します。
1は移動可能。0は移動不可能です。

また画面外にもエリアは広がっているのですが、画面で表示されている情報しか取得できません。

この情報をもとに主人公が移動する位置を決定します。
<物体情報の例>
[[272272272272, 272272272272, 272272272272, 272272272272, 272272272272, 272272272272, 272272272272, 272272272272, 272272272272, 272272272272], [256256294295, 256256295297, 256256256256, 256256256256, 292293308309, 256256256256, 292293308309, 272272272272, 272272272272, 272272272272], [300298316314, 298299314315, 257257257257, 257257257257, 257257257257, 257257257257, 266267282283, 272272272272, 272272272272, 272272272272], [257257257257, 257257257257, 257257257257, 257257257257, 257257004005, 257257257257, 257257257257, 272272272272, 272272272272, 272272272272], [257257257257, 257257257257, 257257257257, 257257257257, 6007257257, 257257257257, 257257257257, 272272272272, 272272272272, 272272272272], [257257257257, 257257257257, 262263278279, 257257257257, 257257257257, 257257257257, 257257257257, 272272272272, 272272272272, 272272272272], [257257257257, 257257257257, 270271286287, 257257257257, 257257257257, 257257257257, 257257257257, 272272272272, 272272272272, 272272272272], [257257257257, 257257257257, 257257257257, 257257257257, 257257257257, 324325264265, 257257257257, 272272272272, 272272272272, 272272272272], [257257257257, 257257257257, 257257257257, 257257257257, 257257257257, 326327280281, 257257257257, 272272272272, 272272272272, 272272272272]]
</物体情報の例>
<衝突情報の例>
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0]]
</衝突情報の例>

</現在表示している画面の情報>

<現在表示している画面上の移動可能範囲について>
主人公は9×10のグリッド上に配置されています。
このエリアの外にも空間が広がっていますが、現在画面上で表示されている空間の情報のみが記載されます。
主人公の位置は、グリッドの中心付近にある(4, 4)です。ここで、行と列は0から始まります。
画面内での移動できる範囲を文字列で渡します。1が移動可能な位置、0が移動できない位置。2が主人公の位置。
<移動可能範囲のデータの例>
[[1,1,1,1,1,1,1,1,1,1],[1,1,0,0,0,1,1,1,1,1],[1,1,0,0,0,0,0,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,2,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,0,0,0,0,1,1,1],[1,1,1,0,0,0,0,1,1,1],[1,1,1,1,1,1,1,1,1,1]]
</移動可能範囲のデータの例>
上記のように配列で渡され、1が移動できる場所、0が移動できない場所、2が主人公が今いる場所です。
</現在表示している画面上の移動可能範囲について>
"""


def transport_prompt(current_game_area_collision, action_logs):
    return f"""
あなたはゲームを攻略するAIです。攻略するゲームは初代ポケモンの赤です。英語版なので英語を解釈してください。
あなたはポケモンの画面を移動可能範囲のJSON情報、現在のゲーム画面の画像と今までの行動履歴を受け取り、現在の状況を判断し、次に進むためのコマンドを複数送ります。
また、その移動可能範囲と画面の画像から現在の状況の説明、加えてそのコマンドを実行した理由をJSONで返します。

{COMMAND_PROMPT}

<あなたの目標>
1. 主人公の家から、家から出てください。
</あなたの目標>

<ゲーム中の建物の構造>
<建物に入る>
ドアの前からドアに向かって移動する方法がある。
</建物に入る>

## 建物から出る
建物から出るときは、階段を探して階段にキャラクターを移動するか、
カーペットがあるとそこが出口になるためカーペットから壁に向かって移動することで出る事ができる。
階段やカーペットは常に下にあるというわけではなく、どこにあるかわからないのでいろいろな場所を見て回る必要がある。
1. 建物の移動先がないか周りを移動する
2. 階段かカーペットがあるとそこが出口なのでキャラクターをそこに移動する
</ゲーム中の建物の構造>

## 主人公の移動の境界
小さい部屋にいるときは、周りが真っ黒になっていることがあります。画像の端が移動できる空間であれば、その先にも移動できます。
画面の端が黒い状態であったり、主人公の周りに移動できないオブジェクト（木など）で覆われている場合は移動できない場所になります。
壁についてもどの位置にあるかを認識しながら行動して下さい。

{GAME_AREA_EXPLAIN_PROMPT}
<現在の移動可能範囲>
{current_game_area_collision}
</現在の移動可能範囲>

<行動の決定方法>
移動可能範囲と画像をもとに判断してください。
現在の移動可能範囲と入力された画像から現在の状況を把握、過去の行動ログから同じ場所を繰り返し移動しないような行動を考えてください。
見たことがない場所に行くことで階段やカーペット（出口）が見つかりやすくなります。
例えば右や下にばかり言っている場合は上や左に行くなどを繰り返すことで新しい選択肢が見つかることがあるので積極的にランダムな選択などをしてください。
</行動の決定方法>


# 過去ログ
{action_logs}
</行動の決定方法>

先に進むことをできる限り考えて行動を選択してください。
また、出力する前に再度このプロンプトに遵守しているか確認してください。
"""
