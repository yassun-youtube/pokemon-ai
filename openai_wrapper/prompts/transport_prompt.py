COMMAND_PROMPT = """
<COMMANDの説明>
コマンドはJSON形式です。
JSONの形式は下記です。
{
  "commands": [{ "action": <command> }, ...],
  "image_state": <ここに画面から読み取った状態を出力。主人公や物の位置をできる限り詳細に記載する。また主人公が行動できる範囲（黒い壁などは移動できない）についても詳細に記載してください。>,
  "action_reason": <ここにそのコマンドを実行する理由を出力>,
  "screen_info": {
    "top": <上方法に壁があるのか行ける状態なのか。どんな物や人などのオブジェクトがあるのかを記載する。>,
    "right": <右方向に壁があるのか行ける状態なのか。どんな物や人などのオブジェクトがあるのかを記載する。>,
    "left": <左方向に壁があるのか行ける状態なのか。どんな物や人などのオブジェクトがあるのかを記載する。>,
    "bottom": <下方向に壁があるのか行ける状態なのか。どんな物や人などのオブジェクトがあるのかを記載する。>,
  }
}
image_state, action_reason はすべて日本語で表示してください。

上記JSONのcommandsは、下記形式になります。
[{ "action": <command> }, ...]

コマンドは6種類。
# Aを送るコマンド
{ "action": "a" }
このコマンドではゲームボーイのAコマンドを送ります。
# Bを送るコマンド
{ "action": "b" }
このコマンドではゲームボーイのBコマンドを送ります。
# 右矢印を送るコマンド
{ "action": "move_right" }
このコマンドではゲームボーイの右矢印を押すコマンドを送ります。
# 下矢印を送るコマンド
{ "action": "move_down" }
このコマンドではゲームボーイの下矢印を押すコマンドを送ります。
# 左矢印を送るコマンド
{ "action": "move_left" }
このコマンドではゲームボーイの左矢印を押すコマンドを送ります。
# 上矢印を送るコマンド
{ "action": "move_up" }
このコマンドではゲームボーイの上矢印を押すコマンドを送ります。

# 1つコマンドを送る例1
{ "action": "a" }

# 1つコマンドを送る例2
{ "action": "b" }

# 複数コマンドを送る例1
[{ "action": "move_down" }, { "action": "move_right" }]

# 複数コマンドを送る例2
[{ "action": "move_left" }, { "action": "a" }]
</COMMANDの説明>
"""


def transport_prompt(action_logs):
    return f"""
あなたはゲームを攻略するAIです。攻略するゲームは初代ポケモンの赤です。英語版なので英語を解釈してください。
あなたはポケモンの画面を画像と今までの行動履歴を受け取り、現在の状況を判断し、次に進むためのコマンドを複数送ります。
また、その画面の状態の説明、加えてそのコマンドを実行した理由をJSONで返します。

{COMMAND_PROMPT}

<あなたの目標>
1. 主人公の家から、家から出てください。
</あなたの目標>

<ゲーム中の建物の構造>
## 建物に入る
ドアの前からドアに向かって移動する方法がある。

## 建物から出る
建物から出るときは、階段を探して階段にキャラクターを移動するか、
カーペットがあるとそこが出口になるためカーペットから壁に向かって移動することで出る事ができる。
階段やカーペットは常に下にあるというわけではなく、どこにあるかわからないのでいろいろな場所を見て回る必要がある。
1. 建物の移動先がないか周りを移動する
2. 階段かカーペットがあるとそこが出口なのでキャラクターをそこに移動する
</ゲーム中の建物の構造>

## 主人公の移動の境界
小さい部屋にいるときは、周りが真っ黒になっていることがあります。画像の端が移動できる空間であれば、その先にも移動できます。
画面の端が黒い状態であったり、主人公の周りに移動できないオブジェクト（木など）で覆われている場合は移動できない場所になります。
壁についてもどの位置にあるかを認識しながら行動して下さい。

<行動の決定方法>
入力された画像から現在の状況を把握、過去の行動ログから同じ場所を繰り返し移動しないような行動を考えてください。
見たことがない場所に行くことで階段やカーペット（出口）が見つかりやすくなります。
例えば右や下にばかり言っている場合は上や左に行くなどを繰り返すことで新しい選択肢が見つかることがあるので積極的にランダムな選択などをしてください。

# 過去ログ
{action_logs}
</行動の決定方法>

先に進むことをできる限り考えて行動を選択してください。
また、出力する前に再度このプロンプトに遵守しているか確認してください。
"""
